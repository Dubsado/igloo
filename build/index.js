// @bun
var A=()=>({handler:{},middleware:[],staticChildren:{}}),j=A();var I=function(v){let M=j;const O=v.split("/").filter(Boolean),T={};for(let b of O)if(M=J(M,b,T),!M)return{node:null};return{node:M,params:T}},J=function(v,M,O){if(v.staticChildren[M])return v.staticChildren[M];if(v.dynamicChild)return O[v.dynamicChild.dynamicName]=M,v.dynamicChild;else return null},G=(v,M)=>{const{node:O,params:T}=I(v);if(!O||!O.handler||!O.handler[M])return null;return{handler:O.handler[M],middleware:O.middleware,params:T}};var C=async(v)=>{const M=new URL(v.url),O=G(M.pathname);if(!O)return new Response(`Path: '${M.pathname}' not found in the Igloo Router`,{status:404,statusText:"Not Found"});if(typeof O.handler==="function"){for(let T of O.middleware)if(typeof T==="function")await T(v);return O.handler(v,O.params)}return new Response(JSON.stringify({pathname:M.pathname,route:O}))};function c(v,M,O,T){let b=j;const f=M.split("/").filter(Boolean);for(let z of f)b=P(b,z);for(let z of v)V(b,z,M),b.handler[z]=T;b.middleware=O}var P=function(v,M){if(M[0]===":")Q(v,M),v.dynamicChild=v=A(),v.dynamicName=M.slice(1);else v=v.staticChildren[M]??=A();return v},Q=function(v,M){if(v.dynamicChild)throw new Error(`Cannot have multiple of the same path. Segment:${M}`)},V=function(v,M,O){if(v.handler[M])throw new Error(`Cannot have multiple of the same path. Path:${O}`)};var B=(v,M="")=>{let O=[];const T=Object.keys(v.staticChildren).sort();for(let f of T)O=O.concat(B(v.staticChildren[f],`${M}/${f}`));if(v.dynamicChild){const f=v.dynamicChild.dynamicName;O=O.concat(B(v.dynamicChild,`${M}/:${f}`))}const b=Object.keys(v.handler).sort();return O=O.concat(b.map((f)=>({method:f,path:M||"/"}))),O},k=()=>{const v=B(j);for(let M of v)console.log(`${M.method} ${M.path}`)};export{j as root,k as printRoutes,B as listRoutes,C as handler,G as findRoute,A as createNode,c as addRoute};

//# debugId=AFDE106096FBA3BE64756e2164756e21
