{
  "version": 3,
  "sources": ["../lib/node.ts", "../lib/router/findRoute.ts", "../lib/handler.ts", "../lib/router/addRoute.ts"],
  "sourcesContent": [
    "export type Handler = string | null | Function\n\nexport interface Node {\n    handler: Handler\n    middleware: Handler[]\n    staticChildren: Record<string, Node>\n    dynamicChild: Node | null\n    dynamicName: string | null\n}\n\n// Function to create a new node\nexport const createNode = (): Node => ({\n    handler: null,\n    middleware: [],\n    staticChildren: {},\n    dynamicChild: null,\n    dynamicName: null,\n})\n\nexport const root = createNode()\n",
  "import { Handler, root } from '../node'\n\ntype Return = {\n    handler: Handler\n    middleware: Handler[]\n    params: Record<string, string>\n}\n\n// Function to find a route and its handler\nexport const findRoute = (path: string): Return | null => {\n    // 1. Start at the root node\n    let node = root\n    // 2. Split path into segments\n    const segments = path.split('/').filter(Boolean)\n    // Initialize params object\n    const params: Record<string, string> = {}\n    for (const segment of segments) {\n        // 3. Loop through each segment\n        // First try to match a static route\n        if (node.staticChildren[segment]) {\n            node = node.staticChildren[segment]\n        } else if (node.dynamicChild) {\n            // If no static route, try to match a dynamic route\n            node = node.dynamicChild\n            // 4. Capture the dynamic parameter\n            params[node.dynamicName!] = segment\n        } else {\n            // 3. No matching route, exit\n            return null\n        }\n    }\n    // 5. Return result\n    if (!node.handler) {\n        return null\n    }\n\n    return {\n        handler: node.handler,\n        middleware: node.middleware,\n        params,\n    }\n}\n",
  "import { findRoute } from '../lib/router/findRoute'\n\nexport const handler = async (req: Request) => {\n    // URL to parse\n    const myURL = new URL(req.url)\n\n    const route = findRoute(myURL.pathname)\n    if (!route) {\n        return new Response(\n            `Path: '${myURL.pathname}' not found in the Igloo Router`,\n            {\n                status: 404,\n                statusText: 'Not Found',\n            }\n        )\n    }\n    if (typeof route.handler === 'function') {\n        for (const middleware of route.middleware) {\n            if (typeof middleware === 'function') {\n                await middleware(req)\n            }\n        }\n        return route.handler(req, route.params)\n    }\n    return new Response(\n        JSON.stringify({\n            pathname: myURL.pathname,\n            route,\n        })\n    )\n}\n",
  "import { Handler, Node, createNode, root } from '../node'\n\n// Function to add a new route\nexport const addRoute = (\n    path: string,\n    middleware: Handler[],\n    handler: Handler\n): void => {\n    // 1. Start at the root node\n    let node: Node = root\n    // 2. Split path into segments\n    const segments = path.split('/').filter(Boolean)\n\n    // Loop through each segment of the path\n    for (const segment of segments) {\n        // Dynamic route segment\n        if (segment[0] === ':') {\n            // Use existing or create new\n            node = node.dynamicChild ??= createNode()\n            // Store the parameter name without the \":\"\n            node.dynamicName = segment.slice(1)\n        } else {\n            // Static route segment (e.g., \"users\")\n            // Use existing or create new\n            node = node.staticChildren[segment] ??= createNode()\n        }\n    }\n    // 4. Assign the handler to the final node\n    node.handler = handler\n    node.middleware = middleware\n}\n"
  ],
  "mappings": "AAWO,IAAM,EAAa,KAAa,CACnC,QAAS,KACT,WAAY,CAAC,EACb,eAAgB,CAAC,EACjB,aAAc,KACd,YAAa,IACjB,GAEa,EAAO,EAAWACVxB,IAAM,EAAY,CAAC,IAAgC,CAEtD,IAAI,EAAO,EAEX,MAAM,EAAW,EAAK,MAAM,GAAG,EAAE,OAAO,OAAO,EAEzC,EAAiC,CAAC,EACxC,QAAW,KAAW,EAGlB,GAAI,EAAK,eAAe,GACpB,EAAO,EAAK,eAAe,WACpB,EAAK,aAEZ,EAAO,EAAK,aAEZ,EAAO,EAAK,aAAgB,MAG5B,QAAO,KAIf,IAAK,EAAK,QACN,OAAO,KAGX,MAAO,CACH,QAAS,EAAK,QACd,WAAY,EAAK,WACjB,QACJACtCG,IAAM,EAAU,MAAO,IAAiB,CAE3C,MAAM,EAAQ,IAAI,IAAI,EAAI,GAAG,EAEvB,EAAQ,EAAU,EAAM,QAAQ,EACtC,IAAK,EACD,OAAO,IAAI,SACP,UAAU,EAAM,0CAChB,CACI,OAAQ,IACR,WAAY,WAChB,CACJ,EAEJ,UAAW,EAAM,UAAY,WAAY,CACrC,QAAW,KAAc,EAAM,WAC3B,UAAW,IAAe,WACtB,MAAM,EAAW,CAAG,EAG5B,OAAO,EAAM,QAAQ,EAAK,EAAM,MAAM,EAE1C,OAAO,IAAI,SACP,KAAK,UAAU,CACX,SAAU,EAAM,SAChB,OACJ,CAAC,CACLAC1BG,IAAM,EAAW,CACpB,EACA,EACA,IACO,CAEP,IAAI,EAAa,EAEjB,MAAM,EAAW,EAAK,MAAM,GAAG,EAAE,OAAO,OAAO,EAG/C,QAAW,KAAW,EAElB,GAAI,EAAQ,KAAO,IAEf,EAAO,EAAK,eAAiB,EAAW,EAExC,EAAK,YAAc,EAAQ,MAAM,CAAC,MAIlC,GAAO,EAAK,eAAe,KAAa,EAAW,EAI3D,EAAK,QAAU,EACf,EAAK,WAAa",
  "debugId": "9C020093642B81F864756e2164756e21",
  "names": []
}